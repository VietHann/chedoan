import 'package:firebase_database/firebase_database.dart';

import '../models/water_intake.dart';
import '../services/firebase_service.dart';

class WaterRepository {
  final FirebaseService _firebaseService;

  WaterRepository(this._firebaseService);

  // Add water intake
  Future<String> addWaterIntake({
    required String email,
    required WaterIntake waterIntake,
  }) async {
    // Get user ID from email
    final userSnapshot = await _firebaseService.getDataByValue(
      _firebaseService.usersRef,
      'email',
      email,
    );
    
    if (!userSnapshot.exists) {
      throw Exception('User not found');
    }
    
    final Map<dynamic, dynamic> users = userSnapshot.value as Map<dynamic, dynamic>;
    final String userId = users.keys.first;
    
    // Create water intake data
    final waterData = waterIntake.toMap();
    waterData.remove('id'); // Remove id as it will be generated by Firebase
    waterData['userId'] = userId; // Add user ID
    
    // Convert date to string
    if (waterData['date'] is DateTime) {
      waterData['date'] = (waterData['date'] as DateTime).toIso8601String().split('T')[0];
    }
    
    // Convert created_at to string
    if (waterData['created_at'] is DateTime) {
      waterData['created_at'] = (waterData['created_at'] as DateTime).toIso8601String();
    }
    
    // Insert the water intake
    return await _firebaseService.pushData(
      _firebaseService.waterIntakesRef,
      waterData,
    );
  }

  // Get all water intakes for a specific date
  Future<List<WaterIntake>> getWaterIntakesForDate({
    required String email,
    required DateTime date,
  }) async {
    // Format date as string (YYYY-MM-DD)
    final dateString = date.toIso8601String().split('T')[0];
    
    // Get user ID from email
    final userSnapshot = await _firebaseService.getDataByValue(
      _firebaseService.usersRef,
      'email',
      email,
    );
    
    if (!userSnapshot.exists) {
      throw Exception('User not found');
    }
    
    final Map<dynamic, dynamic> users = userSnapshot.value as Map<dynamic, dynamic>;
    final String userId = users.keys.first;
    
    // Get all water intakes for the user and date
    final intakeSnapshot = await _firebaseService.waterIntakesRef
        .orderByChild('userId')
        .equalTo(userId)
        .get();
    
    List<WaterIntake> waterIntakes = [];
    
    if (intakeSnapshot.exists) {
      final Map<dynamic, dynamic> intakesData = intakeSnapshot.value as Map<dynamic, dynamic>;
      
      // Filter water intakes by date
      intakesData.forEach((key, value) {
        final Map<dynamic, dynamic> intakeData = value;
        
        // Check if this intake is for the requested date
        if (intakeData['date'] == dateString) {
          waterIntakes.add(WaterIntake.fromMap({
            'id': key,
            ...Map<String, dynamic>.from(intakeData),
          }));
        }
      });
      
      // Sort by created_at
      waterIntakes.sort((a, b) => a.createdAt.compareTo(b.createdAt));
    }
    
    return waterIntakes;
  }

  // Get daily total water intake for a specific date
  Future<int> getDailyTotalWaterIntake({
    required String email,
    required DateTime date,
  }) async {
    final List<WaterIntake> intakes = await getWaterIntakesForDate(
      email: email,
      date: date,
    );

    int total = 0;
    for (var intake in intakes) {
      total += intake.amount;
    }

    return total;
  }

  // Get water intake history for a date range
  Future<Map<DateTime, int>> getWaterIntakeHistory({
    required String email,
    required DateTime startDate,
    required DateTime endDate,
  }) async {
    // Format dates as strings (YYYY-MM-DD)
    final startDateString = startDate.toIso8601String().split('T')[0];
    final endDateString = endDate.toIso8601String().split('T')[0];
    
    // Get user ID from email
    final userSnapshot = await _firebaseService.getDataByValue(
      _firebaseService.usersRef,
      'email',
      email,
    );
    
    if (!userSnapshot.exists) {
      throw Exception('User not found');
    }
    
    final Map<dynamic, dynamic> users = userSnapshot.value as Map<dynamic, dynamic>;
    final String userId = users.keys.first;
    
    // Get all water intakes for the user
    final intakeSnapshot = await _firebaseService.waterIntakesRef
        .orderByChild('userId')
        .equalTo(userId)
        .get();
    
    Map<DateTime, int> history = {};
    
    if (intakeSnapshot.exists) {
      final Map<dynamic, dynamic> intakesData = intakeSnapshot.value as Map<dynamic, dynamic>;
      
      // Filter water intakes by date range
      intakesData.forEach((key, value) {
        final Map<dynamic, dynamic> intakeData = value;
        final String? dateString = intakeData['date'] as String?;
        
        if (dateString != null && 
            dateString.compareTo(startDateString) >= 0 && 
            dateString.compareTo(endDateString) <= 0) {
          // Parse date
          final date = DateTime.parse(dateString);
          
          // Get amount
          final int amount = intakeData['amount'] as int;
          
          // Add to or update in history
          if (history.containsKey(date)) {
            history[date] = history[date]! + amount;
          } else {
            history[date] = amount;
          }
        }
      });
    }
    
    return history;
  }
}