import 'package:firebase_database/firebase_database.dart';

import '../models/meal_entry.dart';
import '../models/food_item.dart';
import '../services/firebase_service.dart';

class MealRepository {
  final FirebaseService _firebaseService;

  MealRepository(this._firebaseService);

  // Add a meal entry
  Future<String> addMealEntry({
    required String email,
    required MealEntry mealEntry,
  }) async {
    // Get user ID from email
    final userSnapshot = await _firebaseService.getDataByValue(
      _firebaseService.usersRef,
      'email',
      email,
    );
    
    if (!userSnapshot.exists) {
      throw Exception('User not found');
    }
    
    final Map<dynamic, dynamic> users = userSnapshot.value as Map<dynamic, dynamic>;
    final String userId = users.keys.first;
    
    // Create meal entry data
    final mealData = mealEntry.toMap();
    mealData.remove('id'); // Remove id as it will be generated by Firebase
    mealData['userId'] = userId; // Add user ID
    
    // Convert date to string
    if (mealData['date'] is DateTime) {
      mealData['date'] = (mealData['date'] as DateTime).toIso8601String().split('T')[0];
    }
    
    // Insert the meal entry
    return await _firebaseService.pushData(
      _firebaseService.mealEntriesRef,
      mealData,
    );
  }

  // Delete a meal entry
  Future<void> deleteMealEntry({
    required String mealEntryId,
  }) async {
    await _firebaseService.deleteData(
      _firebaseService.mealEntriesRef.child(mealEntryId),
    );
  }

  // Get all meals for a specific date
  Future<List<MealEntry>> getMealsForDate({
    required String email,
    required DateTime date,
  }) async {
    // Format date as string (YYYY-MM-DD)
    final dateString = date.toIso8601String().split('T')[0];
    
    // Get user ID from email
    final userSnapshot = await _firebaseService.getDataByValue(
      _firebaseService.usersRef,
      'email',
      email,
    );
    
    if (!userSnapshot.exists) {
      throw Exception('User not found');
    }
    
    final Map<dynamic, dynamic> users = userSnapshot.value as Map<dynamic, dynamic>;
    final String userId = users.keys.first;
    
    // Get all meal entries for the user and date
    final mealsSnapshot = await _firebaseService.mealEntriesRef
        .orderByChild('userId')
        .equalTo(userId)
        .get();
    
    List<MealEntry> meals = [];
    
    if (mealsSnapshot.exists) {
      final Map<dynamic, dynamic> mealsData = mealsSnapshot.value as Map<dynamic, dynamic>;
      
      // Filter meals by date
      await Future.forEach(mealsData.entries, (MapEntry<dynamic, dynamic> entry) async {
        final String mealId = entry.key;
        final Map<dynamic, dynamic> mealData = entry.value;
        
        // Check if this meal is for the requested date
        if (mealData['date'] == dateString) {
          final String foodItemId = mealData['food_item_id'];
          
          // Get the food item
          final foodSnapshot = await _firebaseService.foodItemsRef.child(foodItemId).get();
          
          if (foodSnapshot.exists) {
            final Map<dynamic, dynamic> foodData = foodSnapshot.value as Map<dynamic, dynamic>;
            final FoodItem foodItem = FoodItem.fromMap({
              'id': foodItemId,
              ...Map<String, dynamic>.from(foodData),
            });
            
            // Create meal entry with food item
            final mealEntry = MealEntry.fromMap({
              'id': mealId,
              ...Map<String, dynamic>.from(mealData),
            }, foodItem: foodItem);
            
            meals.add(mealEntry);
          }
        }
      });
    }
    
    return meals;
  }
}