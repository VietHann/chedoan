import 'package:firebase_database/firebase_database.dart';

import '../models/user_profile.dart';
import '../services/firebase_service.dart';

class UserRepository {
  final FirebaseService _firebaseService;

  UserRepository(this._firebaseService);

  Future<UserProfile?> getUserByEmail(String email) async {
    // Get user with matching email
    final snapshot = await _firebaseService.getDataByValue(
      _firebaseService.usersRef,
      'email',
      email,
    );
    
    if (snapshot.exists) {
      final Map<dynamic, dynamic> users = snapshot.value as Map<dynamic, dynamic>;
      
      // Find the first user with matching email
      final String userId = users.keys.first;
      final Map<dynamic, dynamic> userData = users[userId];
      
      // Convert to UserProfile model
      return UserProfile.fromMap({
        'id': userId,
        ...Map<String, dynamic>.from(userData),
      });
    }
    
    // No user found
    return null;
  }

  Future<UserProfile> createUser({
    required String email,
    String? name,
  }) async {
    // Create a new user profile
    final user = UserProfile(
      email: email,
      name: name,
    );
    
    // Convert to Map for storage
    final userData = user.toMap();
    userData.remove('id'); // Remove id as it will be generated by Firebase
    
    // Add to database
    final userId = await _firebaseService.pushData(
      _firebaseService.usersRef,
      userData,
    );
    
    // Return user with ID
    return user.copyWith(id: userId);
  }

  Future<void> updateUser(UserProfile userProfile) async {
    if (userProfile.id == null) {
      throw Exception('Cannot update user without ID');
    }
    
    // Convert to Map for storage
    final userData = userProfile.toMap();
    userData.remove('id'); // Remove id as it's already in the path
    
    // Update in database
    await _firebaseService.updateData(
      _firebaseService.usersRef.child(userProfile.id!),
      userData,
    );
  }
}